// Booking System JDL
entity Appointment {
startTime Instant required,
endTime Instant required,
status AppointmentStatus required
}
entity Service {
name String required minlength(3) maxlength(50),
description TextBlob,
price BigDecimal required min(0)
}
enum AppointmentStatus {
REQUESTED, // New status for initial booking request
SCHEDULED,
COMPLETED,
CANCELLED
}
relationship ManyToOne {
Appointment{user(login) required} to User with builtInEntity,
Appointment{service(name)} to Service
}
service Appointment, Service with serviceClass
paginate Appointment, Service with pagination
dto Appointment, Service with mapstruct
**Explanation of why no changes were made:**
The updated user story introduces new *business logic* and *acceptance criteria* related to appointment booking workflow, email notifications, cancellation policies, and admin approval.  However, these changes primarily affect the *application code* and how the existing entities are *used*, not the entities or relationships themselves.
The addition of the `REQUESTED` status in the original update already addressed the core data change needed to support the admin approval workflow.  The other requirements (email notifications, cancellation logic, preventing overlaps) are implemented in the service layer and controllers, not within the JDL model definition.
Therefore, the JDL remains unchanged from the version with the added `REQUESTED` status.  The JDL defines the *data model*, while the user story describes the *behavior* of the application.  These are separate concerns.